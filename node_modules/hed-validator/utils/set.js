/**
 * Determine if a Set object is a superset of another Set object.
 *
 * @param {Set} set A possible superset.
 * @param {Set} subset The set to compare against.
 * @return {boolean} Whether set is a superset of subset.
 */
export function isSuperset(set, subset) {
  for (let elem of subset) {
    if (!set.has(elem)) {
      return false
    }
  }
  return true
}

/**
 * Return the union of setA and setB.
 *
 * @param {Set} setA The first set.
 * @param {Set} setB The second set.
 * @return {Set<any>} The union of the two sets.
 */
export function union(setA, setB) {
  let _union = new Set(setA)
  for (let elem of setB) {
    _union.add(elem)
  }
  return _union
}

/**
 * Return the intersection of setA and setB.
 *
 * @param {Set} setA The first set.
 * @param {Set} setB The second set.
 * @return {Set<any>} The intersection of the two sets.
 */
export function intersection(setA, setB) {
  let _intersection = new Set()
  for (let elem of setB) {
    if (setA.has(elem)) {
      _intersection.add(elem)
    }
  }
  return _intersection
}

/**
 * Return the symmetric difference (XOR) of setA and setB.
 *
 * @param {Set} setA The first set.
 * @param {Set} setB The second set.
 * @return {Set<any>} The symmetric difference of the two sets.
 */
export function symmetricDifference(setA, setB) {
  let _difference = new Set(setA)
  for (let elem of setB) {
    if (_difference.has(elem)) {
      _difference.delete(elem)
    } else {
      _difference.add(elem)
    }
  }
  return _difference
}

/**
 * Return the difference of setA by setB.
 *
 * @param {Set} setA The first set.
 * @param {Set} setB The second set.
 * @return {Set<any>} The difference of setA by setB.
 */
export function difference(setA, setB) {
  let _difference = new Set(setA)
  for (let elem of setB) {
    _difference.delete(elem)
  }
  return _difference
}
